name: Build Multi-Architecture Executables

on:
  workflow_dispatch:
    inputs:
      targets:
        description: 'Select target architectures to build'
        required: true
        type: choice
        options:
          - 'all'
          - 'linux-only'
          - 'windows-only'
          - 'macos-only'
          - 'custom'
        default: 'all'
      custom_targets:
        description: 'Custom targets (comma-separated, e.g., x86_64-unknown-linux-gnu,aarch64-apple-darwin)'
        required: false
        type: string
        default: ''
      examples:
        description: 'Examples to build'
        required: true
        type: choice
        options:
          - 'all'
          - 'client'
          - 'server'
          - 'custom_auth_server'
          - 'router'
          - 'udp_client'
        default: 'all'
      release_mode:
        description: 'Build in release mode'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.set-targets.outputs.targets }}
      examples: ${{ steps.set-examples.outputs.examples }}
    steps:
      - name: Set target architectures
        id: set-targets
        run: |
          case "${{ github.event.inputs.targets }}" in
            "all")
              targets='["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "x86_64-pc-windows-gnu", "x86_64-apple-darwin", "aarch64-apple-darwin"]'
              ;;
            "linux-only")
              targets='["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu"]'
              ;;
            "windows-only")
              targets='["x86_64-pc-windows-gnu"]'
              ;;
            "macos-only")
              targets='["x86_64-apple-darwin", "aarch64-apple-darwin"]'
              ;;
            "custom")
              if [ -n "${{ github.event.inputs.custom_targets }}" ]; then
                IFS=',' read -ra TARGET_ARRAY <<< "${{ github.event.inputs.custom_targets }}"
                targets="["
                for i in "${TARGET_ARRAY[@]}"; do
                  targets+='"'$(echo "$i" | xargs)'",'
                done
                targets="${targets%,}]"
              else
                targets='["x86_64-unknown-linux-gnu"]'
              fi
              ;;
            *)
              targets='["x86_64-unknown-linux-gnu"]'
              ;;
          esac
          echo "targets=$targets" >> $GITHUB_OUTPUT

      - name: Set examples to build
        id: set-examples
        run: |
          case "${{ github.event.inputs.examples }}" in
            "all")
              examples='["client", "server", "custom_auth_server", "router", "udp_client"]'
              ;;
            *)
              examples='["${{ github.event.inputs.examples }}"]'
              ;;
          esac
          echo "examples=$examples" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
        example: ${{ fromJson(needs.prepare.outputs.examples) }}
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            cross: true
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Install cross (if needed)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install additional dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build example
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            if [ "${{ github.event.inputs.release_mode }}" = "true" ]; then
              cross build --example ${{ matrix.example }} --target ${{ matrix.target }} --release
            else
              cross build --example ${{ matrix.example }} --target ${{ matrix.target }}
            fi
          else
            if [ "${{ github.event.inputs.release_mode }}" = "true" ]; then
              cargo build --example ${{ matrix.example }} --target ${{ matrix.target }} --release
            else
              cargo build --example ${{ matrix.example }} --target ${{ matrix.target }}
            fi
          fi

      - name: Prepare artifacts
        run: |
          if [ "${{ github.event.inputs.release_mode }}" = "true" ]; then
            BUILD_DIR="target/${{ matrix.target }}/release/examples"
          else
            BUILD_DIR="target/${{ matrix.target }}/debug/examples"
          fi
          
          mkdir -p artifacts
          
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp "$BUILD_DIR/${{ matrix.example }}.exe" "artifacts/${{ matrix.example }}-${{ matrix.target }}.exe"
          else
            cp "$BUILD_DIR/${{ matrix.example }}" "artifacts/${{ matrix.example }}-${{ matrix.target }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example }}-${{ matrix.target }}
          path: artifacts/
          retention-days: 30

  package:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Package all executables
        run: |
          mkdir -p release-package
          find all-artifacts -type f -executable -o -name "*.exe" | while read file; do
            cp "$file" release-package/
          done
          
          # Create a summary file
          echo "# Build Summary" > release-package/BUILD_SUMMARY.md
          echo "Built on: $(date)" >> release-package/BUILD_SUMMARY.md
          echo "Targets: ${{ needs.prepare.outputs.targets }}" >> release-package/BUILD_SUMMARY.md
          echo "Examples: ${{ needs.prepare.outputs.examples }}" >> release-package/BUILD_SUMMARY.md
          echo "Release mode: ${{ github.event.inputs.release_mode }}" >> release-package/BUILD_SUMMARY.md
          echo "" >> release-package/BUILD_SUMMARY.md
          echo "## Files:" >> release-package/BUILD_SUMMARY.md
          ls -la release-package/ | grep -v "^d" | awk '{print "- " $9 " (" $5 " bytes)"}' >> release-package/BUILD_SUMMARY.md

      - name: Create release archive
        run: |
          cd release-package
          tar -czf ../fast-socks5-executables-$(date +%Y%m%d-%H%M%S).tar.gz *
          cd ..

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: fast-socks5-executables-package
          path: fast-socks5-executables-*.tar.gz
          retention-days: 90

  test:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - name: Download Linux x86_64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-x86_64-unknown-linux-gnu
          path: test-artifacts

      - name: Download Linux x86_64 server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-x86_64-unknown-linux-gnu
          path: test-artifacts

      - name: Test executables
        run: |
          chmod +x test-artifacts/*
          
          # Basic smoke test - just check if binaries run and show help
          echo "Testing client executable..."
          timeout 10s ./test-artifacts/client-x86_64-unknown-linux-gnu --help || echo "Client help test completed"
          
          echo "Testing server executable..."
          timeout 10s ./test-artifacts/server-x86_64-unknown-linux-gnu --help || echo "Server help test completed"
          
          echo "All smoke tests passed!"
